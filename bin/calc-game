#! /usr/bin/env node

var readline  = require('readline');
var chalk     = require('chalk');
var calc      = require('../lib/calc')();

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

var show = function(question) {
  var out = '';
  question.forEach(function(x, i) {
    if (0 === (i % 2)) {
      out += chalk.green(x);
    } else {
      out += chalk.red(' ' + x + ' ');
    }
  });
  return out + chalk.blue(' = ');
};

var right = function(game, answer, ss) {
  count += 1;
  var line = show(game.question) + chalk.green(answer);
  line += '\t🐂  ' + chalk.gray(ss + 's\n');
  rl.write(line);
  play();
};

var wrong = function(game, answer, ss) {
  var line = show(game.question) + chalk.red(answer);
  line += '\t🐛  ' + chalk.gray(ss + 's\n');
  rl.write(line);
  display(game);
};

var display = function(game) {
  var startedAt = Date.now();
  rl.question(show(game.question), function(answer) {
    var ss = Math.round((Date.now() - startedAt) / 1000);
    answer = chalk.stripColor(answer.trim());
    if ('exit' === answer) return exit();
    readline.moveCursor(process.stdout, 0, -1);
    readline.clearLine(process.stdout, 0);
    if (game.answer(answer)) {
      return right(game, answer, ss);
    } else {
      return wrong(game, answer, ss);
    }
  });
};

var play = function() {
  display(calc());
};

var exit = function() {
  stats();
  process.exit();
};

var stats = function() {
  var ss = Math.round((Date.now() - startedAt) / 1000);
  rl.write(chalk.gray('\n总耗时: ' + ss + 's, 共完成：' + count + '题。\n'));
};

var startedAt = Date.now();
var count = 0;

play();
